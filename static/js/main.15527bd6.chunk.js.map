{"version":3,"sources":["components/Dataset.js","components/Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Dataset","keyCode","keyTrigger","id","url","Drumpad","handleClick","_this","audio","play","currentTime","props","handleDisplay","handleKeydown","event","letter","charCodeAt","document","addEventListener","this","removeEventListener","_this2","_this$props","react_default","a","createElement","className","onClick","ref","src","Component","DrumMachine","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","display","setState","state","map","d","i","components_Drumpad","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgDeA,SAhDC,CAAC,CACbC,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,0DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,cACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,YACJC,IAAK,4DCJQC,6MA/BfC,YAAc,WACZC,EAAKC,MAAMC,OACXF,EAAKC,MAAME,YAAc,EACzBH,EAAKI,MAAMC,cAAcL,EAAKI,MAAMR,OAEtCU,cAAgB,SAACC,GACZA,EAAMb,UAAYM,EAAKI,MAAMI,OAAOC,eACrCT,EAAKC,MAAMC,OACXF,EAAKC,MAAME,YAAc,EACzBH,EAAKI,MAAMC,cAAcL,EAAKI,MAAMR,yFAdtCc,SAASC,iBAAiB,UAAWC,KAAKN,8DAG1CI,SAASG,oBAAoB,UAAWD,KAAKN,gDAcvC,IAAAQ,EAAAF,KAAAG,EACsBH,KAAKR,MAAzBR,EADFmB,EACEnB,GAAIY,EADNO,EACMP,OAAQX,EADdkB,EACclB,IACZE,EAAgBa,KAAhBb,YACR,OACEiB,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACVvB,GAAIA,EACJwB,QAASrB,GACTiB,EAAAC,EAAAC,cAAA,SAAIV,GACJQ,EAAAC,EAAAC,cAAA,SACEG,IAAK,SAAAA,GAAG,OAAIP,EAAKb,MAAQoB,GACzBF,UAAU,OACVG,IAAKzB,EACLD,GAAIY,YAhCQe,aCoCPC,cAhCb,SAAAA,EAAYpB,GAAM,IAAAJ,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAb,KAAAY,IAChBxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjB,KAAMR,KAKRC,cAAgB,SAACyB,GACf9B,EAAK+B,SAAS,CACZD,QAASA,KANX9B,EAAKgC,MAAQ,CACXF,QAAS,IAHK9B,wEAWV,IAAAc,EAAAF,KACAkB,EAAYlB,KAAKoB,MAAjBF,QACN,OACEd,EAAAC,EAAAC,cAAA,OAAKtB,GAAG,gBACNoB,EAAAC,EAAAC,cAAA,OAAKtB,GAAG,WAAYkC,GACpBd,EAAAC,EAAAC,cAAA,OAAKtB,GAAG,YACNH,EAAQwC,IAAI,SAACC,EAAGC,GAAJ,OACVnB,EAAAC,EAAAC,cAACkB,EAAD,CACEC,IAAKF,EACL3B,OAAQ0B,EAAEvC,WACVC,GAAIsC,EAAEtC,GACNC,IAAKqC,EAAErC,IACPQ,cAAeS,EAAKT,2BAxBRkB,aCONe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15527bd6.chunk.js","sourcesContent":["const Dataset = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n]\n\nexport default Dataset","import React, { Component } from 'react';\n\nclass Drumpad extends Component {\n  componentDidMount(){\n    document.addEventListener('keydown', this.handleKeydown)\n    }\n  componentWillUnmount(){\n    document.removeEventListener('keydown', this.handleKeydown)\n    }\n  handleClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.id)\n  }\n  handleKeydown = (event) => {\n    if(event.keyCode === this.props.letter.charCodeAt()){\n      this.audio.play()\n      this.audio.currentTime = 0\n      this.props.handleDisplay(this.props.id)\n      }\n    }\n  render(){\n    const { id, letter, url } = this.props\n    const { handleClick } = this\n    return(\n      <div\n        className=\"drum-pad\"\n        id={id}\n        onClick={handleClick}>\n        <p>{letter}</p>\n        <audio\n          ref={ref => this.audio = ref}\n          className='clip'\n          src={url}\n          id={letter}>\n        </audio>\n      </div>)\n    }\n  }\n\n  export default Drumpad","import React, { Component } from 'react';\nimport './App.scss';\nimport Dataset from './components/Dataset'\nimport Drumpad from './components/Drumpad'  \n\nclass DrumMachine extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      display: ''\n      }\n    }\n  handleDisplay = (display) => {\n    this.setState({\n      display: display\n      })\n    }\n  render(){\n    let { display } = this.state\n    return(\n      <div id=\"drum-machine\">\n        <div id=\"display\">{ display }</div>\n        <div id=\"drumpads\">\n        { Dataset.map((d, i) => (\n            <Drumpad\n              key={i}\n              letter={d.keyTrigger}\n              id={d.id}\n              url={d.url}\n              handleDisplay={this.handleDisplay}/>\n            ))\n        }\n        </div>\n      </div>\n      );\n    }\n  }\n\nexport default DrumMachine;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}